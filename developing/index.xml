<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2. Developing on GCS Docs</title>
    <link>https://dominiccobo-fyp.github.io/docs/developing/</link>
    <description>Recent content in 2. Developing on GCS Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 05 Jan 2020 00:09:45 +0000</lastBuildDate>
    
	<atom:link href="https://dominiccobo-fyp.github.io/docs/developing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overview</title>
      <link>https://dominiccobo-fyp.github.io/docs/developing/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dominiccobo-fyp.github.io/docs/developing/overview/</guid>
      <description>High Level graph LR A[&#34;IDE A&#34;] AA[&#34;IDE B&#34;] AB[&#34;IDE C&#34;] B[&#34;Local Context Daemon&#34;] C((&#34;Message Bus&#34;)) D[(&#34;Documentation Provider&#34;)] E[(&#34;Experts Provider&#34;)] F[(&#34;Work Items Provider&#34;)] X[&#34;Data sources&#34;] subgraph Client A -- B; AA -- B; AB -- B; end subgraph Server B -- C; C -- 1 * -- D; C -- 1 * -- E; C -- 1 * -- F; end D -- X; E -- X; F -- X;  Low Level sequenceDiagram IDE-+Daemon: Here&#39;s a context, answer this?</description>
    </item>
    
    <item>
      <title>Client-Side</title>
      <link>https://dominiccobo-fyp.github.io/docs/developing/clientside/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dominiccobo-fyp.github.io/docs/developing/clientside/</guid>
      <description>Areas of Development The Daemon The daemon is developed using Java. Spring is used as the base platform with Axon Framework for messaging.
Guidelines  Focuses mainly on backend logic and reusable integration points.  IDE Extensions Each IDE has its own approach to plugins. For example, Electron based IDEs such a Atom and VSCode rely on variations of NodeJS for extensibility.
Guidelines  Focus on the principles of thin clients.</description>
    </item>
    
    <item>
      <title>Server-Side</title>
      <link>https://dominiccobo-fyp.github.io/docs/developing/serverside/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dominiccobo-fyp.github.io/docs/developing/serverside/</guid>
      <description>Messaging The messaging technology used currently is Axon Server.
Deployment and Packaging Kubernetes Used to orchestrate the server side containers.
Product Website
Helm Used for simplification of the packaging and deployment of the server-side components.
Product Website
Creating a resolver Below is an example of the requirements to implement a resolver
@SpringBootApplication public class App { public static void main(String[] args){ SpringApplication.run(App.class, args); } } @Component public class ExpertsProvider implements ExpertsQueryListener { @QueryHandler @Override public List&amp;lt;Expert&amp;gt; on(AssociatedExpertsQuery query) { // TODO: compute values that need returning 	return new ArrayList&amp;lt;&amp;gt;(); } } Using the following dependencies:</description>
    </item>
    
  </channel>
</rss>